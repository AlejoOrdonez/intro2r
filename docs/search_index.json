[
["index.html", "A Introduction to R Preface", " A Introduction to R Alex Douglas December 3, 2019 Preface The purpose of this book is to introduce you to using R, a powerful and flexible interactive environment for statistical computing and research. R in itself is not difficult to learn, but as with learning any new language (spoken or computer) the initial learning curve can be a little steep and somewhat daunting. I have tried to simplify the content of this book as much as possible and have based it on my own personal experience of teaching (and learning) R over the last 15 years. It is not intended to cover everything there is to know about R - that would be an impossible task. Neither is it intended to be an introductory statistics course, although you will be using some simple statistics to highlight some of R’s capabilities. The main aim of this book is to help you climb the initial learning curve and provide you with the basic skills and experience (and confidence!) to enable you to further your experience in using R. A few notes about this book. Although you can use this book as a standalone resource, I strongly recommend you use it in conjunction with the companion website. The course website contains a series of exercises which will help you practice writing R code and test your understanding of key concepts - you certainly won’t learn how to use R by watching other people do it (or reading a book about it!). The website also contains solutions for each of the exercises and a plethora of links to additional resources. A question I get asked fairly regularly is ‘what’s the best/easiest way to learn R?’. Unfortunately, I don’t have a ready answer to this question as everyone tends to learn R in their own way and at their own pace. Having said that, here are a few things to bear in mind that might help: Use R often and use it regularly - find any excuse to fire up R (or RStudio) and get coding to help build and maintain all important momentum. Learning R is not a memory test. One of the beauties of a scripting language is that you will always have your code to refer back to when you inevitably forget how to do something. You don’t need to know everything there is to know about R to use it productively. If you get stuck, Google it, it’s not cheating and writing a good search query is a skill in itself. Just make sure you check thoroughly that the code you find is doing what you want it to do. If you find yourself staring at code for hours trying to find out why it’s not working then walk away for a few minutes. I have lost count of the number of times I was able to spot my mistake almost immediately after returning from a short caffeine break. In R there are many ways to tackle a particular problem. If your code doesn’t look like someone else’s, but it does what you want it to do in a reasonable time and robustly then don’t worry about it - job done. Related to the previous point, remember R is just a tool to help you answer your interesting questions. Although it can be fun to immerse yourself in all things R, don’t lose sight of what’s important - your research question(s) and your data. No amount of skill using R will help if your data collection is fundamentaly flawed or your question vague. Recognise that there will be times when things will get a little tough or frustrating. Try to accept these periods as part of the natural process of learning how to use R (we’ve all been there) and remember, the time and energy you invest now will be more than payed back in the not too distant future. Finally, once you have finished working your way through this book, I encourage you to practice what you’ve learned using your own data. If you don’t have any data yet, then ask your colleagues / friends / family for some (I’m sure they will be delighted!) or follow one of the many excellent tutorials available on-line (see the course website for more details). My suggestion to you, is that while you are getting to grips with R, uninstall any other statistics software you have on your computer and only use R. This may seem a little extreme but will hopefully remove the temptation to ‘just do it quickly’ in a more familiar environment and consequently slow down your learning of R. Believe me, anything you can do in your existing statistics software package you can do in R - often more robustly and efficiently. Good luck and have don’t forget to have fun. This book is written in RMarkdown with bookdown. "],
["getting-started-with-r-and-rstudio.html", "Chapter 1 Getting started with R and RStudio", " Chapter 1 Getting started with R and RStudio Although R is not new, it’s popularity has increased rapidly over the last 10 years or so (see here for an interesting take). It was originally created and developed by Ross Ihaka and Robert Gentleman during the 1990’s with the first stable version released in 2000. R is currently developed and maintained by the R Development Core Team. Why has R become so popular? Some reasons include: R is open source and freely available. R is available for Windows, Mac and Linux operating systems. R has an extensive and coherent set of tools for statistical analysis. R has an extensive and highly flexible graphical facility capable of producing publication quality figures. R has an expanding set of freely available ‘packages’ of routines for special or unusual analyses. R has an extensive support network with numerous online and freely available documents. However, for those who haven’t used it before, R may seem rather daunting and complex. Whilst the initial learning curve is admittedly a little steep, R offers the user a degree of flexibility and control not usually available in other more traditional ‘point and click’ statistical software. Most importantly, learning to use R will change the way you think about data analysis. As your analysis will be implemented using R code and R scripts you will always have a permanent and accurate record of your analytical approach which you can then make available to others to facilitate robust and reproducible research practices. "],
["installing-r.html", "1.1 Installing R", " 1.1 Installing R To get up and running the first thing you need to do is install R. R is freely available for Windows, Mac and Linux operating systems from the Comprehensive R Archive Network (CRAN) website. For Windows and Mac users I suggest you download and install the precompiled binary versions. For Windows users select ‘Download R for Windows’ link and then click on the ‘base’ link and finally the download link ‘Download R 3.X.X for Windows’ (where 3.X.X is the latest version of the binary - 3.6.1 at the time of writing). This will begin the download of the ‘.exe’ installation file. When the download has completed double click on the R executable file and follow the on-screen instructions. Full installation instructions can be found at the CRAN website. For Mac users select the ‘Download R for (Mac) OS X’ link. The binary can be downloaded by selecting the ‘R-3.X.X.pkg’ (R-3.6.1.pkg at the time of writing). Once downloaded, double click on the file icon and follow the on-screen instructions to guide you through the necessary steps. See the ‘R for Mac OS X FAQ’ for further information on installation. For Linux users, the installation method will depend on which flavour of linux you are using. There are reasonably comprehensive instruction here for Debian, Redhat, Suse and Ubuntu. In most cases you can just use your OS package manager to install R from the official repository. On Ubuntu fire up a shell (console) and use (you will need root permission to do this): sudo apt update sudo apt install r-base r-base-dev which will install base R and also the development version of base R (you only need this if you want to compile R packages from source but it doesn’t hurt to have it). If you receive an error after running the code above you may need to add a ‘source.list’ entry to your etc/apt/sources.list file. To do this open the /etc/apt/sources.list file in your favourite text editor (gedit, vim, nano etc) and add the following line (you will need root permission to do this): deb https://cloud.r-project.org/bin/linux/ubuntu disco-cran35/ This is the source.list for the latest version (at the time of writing) of Ubuntu (19.04 Disco Dingo). If you’re using an earlier version of Ubuntu then replace the source.list entry to the one which corresponds to the version of Ubuntu you are using (see here for an up to date list). Once you have done this then re-run the apt commands above and you should be good to go. Whichever operating system you’re using, once you have installed R you need to check its working properly. The easiest way to do this is to start R by double clicking on the R icon (Windows or Mac) or by typing R into the console (Linux). You should see the R console and you should be able to type R commands into the console. Try typing the following R code and then press enter (don’t worry of you don’t understand this - we’re just checking if R works) A plot of the numbers 1 to 10 on both the x and y axes should appear. If you see this, you’re good to go. If not then I suggest you make a note of any errors produced and then use Google to troubleshoot). plot(1:10) Figure 1.1: plot to test R installation A plot of the numbers 1 to 10 on both the x and y axes should appear. If you see this, you’re good to go. If not then I suggest you make a note of any errors produced and then use Google to troubleshoot). "],
["installing-rstudio.html", "1.2 Installing RStudio", " 1.2 Installing RStudio Whilst its eminently possible to just use the base installation of R (many people do), we will be using a popular Integrated Development Environment (IDE) called RStudio. RStudio can be thought of as an add-on to R which provides a more user-friendly interface, incorporating the R console, script editor and other useful functionality (like R markdown and Git Hub integration). You can find more information about RStudio here. RStudio is freely available for Windows, Mac and Linux operating systems and can be downloaded from the RStudio site. You should select the ‘RStudio Desktop’ version. Note: you must install R before you install RStudio (see previous section for details). For Windows and Mac users you should be presented with the appropriate link for downloading. Click on this link and once downloaded run the installer and follow the instructions. If you don’t see the link then scroll down to the ‘All Installers’ section and choose the appropriate link manually. For linux users scroll down to the ‘All Installers’ section and choose the appropriate link to download the binary for your Linux operating system. RStudio for Ubuntu (and Debian) is available as a *.deb package. The easiest way to install deb files on Ubuntu is by using the gdebi command. If gdebi is not available on your system you can install it by executing the following command in the console (you will need root permission to do this) sudo apt update sudo apt install gdebi-core To install the *.deb file navigate to where you downloaded the file and then enter the following command with root permission sudo gdebi rstudio-xenial-1.2.5XXX-amd64.deb where ‘-1.2.5XXX’ is the current version for Ubuntu (rstudio-xenial-1.2.5019-amd64.deb at the time of writing). You can then start RStudio from the console by simply typing rstudio or you can create a shortcut on your Desktop for easy startup. Once installed, you can check everything is working by starting up RStudio. You should see something like the image below (there might only be 3 windows when you first start RStudio, don’t worry, we’ll get to this in a bit). Figure 1.2: RStudio on Mac OS X "],
["alternatives-to-rstudio.html", "1.3 Alternatives to RStudio", " 1.3 Alternatives to RStudio Although RStudio is becoming increasingly popular it might not be the best choice for everyone and you certainly don’t have to use it to use R effectively. Rather than using an ‘all in one’ IDE many people choose to use R and a separate script editor to write and execute R code. If you’re not familiar with what a script editor is, you can think of it as a bit like a word processor but specifically designed for writing code. Happily, there are many script editors freely available so feel free to download and experiment until you find one you like. Some script editors are only available for certain operating systems and not all are specific to R. Suggestions for script editors are: For windows users Tinn-R (https://sourceforge.net/projects/tinn-r/) Atom (https://atom.io/) Notepad++ (https://notepad-plus-plus.org/) For Mac users TextMate (https://macromates.com/) Atom (https://atom.io/) MacVim (https://github.com/macvim-dev/macvim) For Linux users gedit (comes with Ubuntu already) Atom (https://atom.io/) vim/nano (console based editors) Which one you choose is up to you. One of the great things about R is that YOU get to choose how you want to use R "],
["rstudio-orientation.html", "1.4 RStudio orientation", " 1.4 RStudio orientation When you open R studio for the first time you should see the following layout: The large window (aka pane) on the left is the Console window. The window on the top right is the Environment / History / Files pane and the bottom left window is the Plots / Help / Viewer window. We will discuss each of these panes in turn below. You can customise the location of each pane by clicking on the ‘Tools’ menu then selecting Global Options –&gt; Pane Layout. You can resize the panes by clicking and dragging the middle of the window borders in the direction you want. There are a plethora of other ways to customise RStudio. 1.4.1 Console The console is the workhorse of R. This is where R evaluates all the code you write and stores all the objects (data for example) you create. You can type R code directly into the console at the command line prompt, &gt;. For example, if you type 2 + 2 into the console you should obtain the answer 4 (reassuringly). Don’t worry about the [1] at the start of the line for now. However, once you start writing more R code this becomes rather cumbersome. Instead of typing R code directly into the console a better approach is to create an R script. An R script is just a plain text file with a .R file extension which contains your lines of R code. These lines of code are then sourced into the R console line by line. To create a new R script click on the ‘File’ menu then select New File –&gt; R Script. Notice that you have a new window (called the Source pane) in the top left of RStudio and the console is now in the bottom left position. The new window is a script editor and where you will write your code. To source your code from your script editor to the console simply place your cursor on the line of code and then click on the ‘Run’ button in the top right of the script editor pane. You should see the result in the console window. If clicking on the ‘Run’ button starts to become tiresome you can use the keyboard shortcut ‘ctrl + enter’ (on Windows and Linux) or ‘cmd + enter’ (on Mac). You can save your R scripts as a .R file by selecting the ‘File’ menu and clicking on save. To open your R script in RStudio select the ‘File’ menu and then ‘Open File…’. Although R scripts are saved with a .R extension they are actually just plain text files which can be opened with any text editor. A quick note or two about R scripts. Unless you’re doing something really quick and dirty I suggest that you always write your code as an R script. R scripts are what make R so useful. Not only do you have a complete record of your analysis, from data manipulation, visualisation and statistical analysis, you can also share this code (and data) with friends, colleagues and importantly when you submit and publish your research to a journal. With this in mind, make sure you include in your R script all the information required to make your work reproducible (author names, dates, sampling design etc). This information could be included as a series of comments # or, even better, as code incorporated with commentary into an R markdown document. How you write your code is more or less up to you although your goal should be to make it as easy to read as possible. You can find a few style guides for writing readable R code here and here 1.4.2 Environment / History / Files The Environment / History / Files window shows you lots of useful information. You can access each component by clicking on the appropriate tab in the pane. The ‘Environment’ tab displays all the objects you have created in the current (global) environment. These objects can be things like data you have imported or functions you have written. Objects can be displayed as a List or in Grid format by selecting your choice from the drop down button on the top right of the window. If you’re in the Grid format you can remove objects from the environment by placing a tick in the empty box next to the object name and then click on the broom icon. There’s also an ‘Import Dataset’ button which will import data saved in a variety of file formats. However, I would suggest that you don’t use this approach to import your data as it’s not reproducible and therefore not robust (see Chapter 3 for more details). The ‘History’ tab simply contains a list of all the commands you have entered into the R console. You can search back through your history for the line of code you have forgotten, send selected code back to the console or Source window. I usually never use this as I always refer back to my R script. The ‘Files’ tab lists all external files and directories in the current working directory on your computer. It works like file explorer (Windows) or Finder (Mac). You can open, copy, rename, move and delete files listed in the window. 1.4.3 Plots / Help / Viewer The ‘Plots’ tab is where all the plots you create in R are displayed (unless you tell R otherwise). You can ‘zoom’ into the plots to make them larger and scroll back through previously created plots using the arrow buttons. There is also the option of exporting plots to an external file using the ‘Export’ drop down menu. Plots can be exported in various file formats such as jpeg, png, pdf, tiff or copied to the clipboard (although you are probably better off using the appropriate R functions to do this - see Chapter 4 for more details). The ‘Help’ tab displays the R help documentation for any function. We will go over how to view the help files and how to search for help in Chapter 2. The ‘Viewer’ tab displays local web content such as web graphics generated by some packages. "],
["some-r-basics.html", "Chapter 2 Some R Basics", " Chapter 2 Some R Basics content to follow "],
["data-in-r.html", "Chapter 3 Data in R", " Chapter 3 Data in R content to follow "],
["graphics-in-r.html", "Chapter 4 Graphics in R", " Chapter 4 Graphics in R content to follow "],
["simple-statistics-in-r.html", "Chapter 5 Simple Statistics in R", " Chapter 5 Simple Statistics in R content to follow "],
["programming-in-r.html", "Chapter 6 Programming in R", " Chapter 6 Programming in R content to follow "],
["reproducible-reports.html", "Chapter 7 Reproducible reports", " Chapter 7 Reproducible reports "],
["version-control-with-git-and-github.html", "Chapter 8 Version control with Git and GitHub", " Chapter 8 Version control with Git and GitHub "]
]
